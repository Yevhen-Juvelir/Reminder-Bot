"""
handlers.py ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
"""

import os
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from backend import database, crud
from .keyboards import start_keyboard

ALLOWED_PHONE = os.getenv("ALLOWED_PHONE")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
TITLE, DESCRIPTION, LINK, PHOTO, TIME = range(5)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
IMAGES_DIR = "images"
os.makedirs(IMAGES_DIR, exist_ok=True)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    user = update.effective_user
    db_user = crud.get_user(db, user.id)
    if not db_user:
        crud.create_user(db, user.id, user.username or "unknown")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á.\n–Ø–∫—â–æ —Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é.",
        reply_markup=start_keyboard()
    )

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞)
async def start_create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    query = update.callback_query
    await query.answer()

    user = crud.get_user(db, query.from_user.id)
    if not user or user.phone != ALLOWED_PHONE:
        await query.message.reply_text("üö´ –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó.")
        return ConversationHandler.END

    await query.message.reply_text("üìù –í–≤–µ–¥–∏ *–Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó*:", parse_mode="Markdown")
    return TITLE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def get_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text("üí¨ –í–≤–µ–¥–∏ –æ–ø–∏—Å –∞–±–æ `-`, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", parse_mode="Markdown")
    return DESCRIPTION

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data["description"] = None if text == "-" else text
    await update.message.reply_text("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ `-`, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", parse_mode="Markdown")
    return LINK

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
async def get_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data["link"] = None if text == "-" else text
    await update.message.reply_text("üì∏ –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ `-`, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", parse_mode="Markdown")
    return PHOTO

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        file_path = os.path.join(IMAGES_DIR, f"{file.file_unique_id}.jpg")
        await file.download_to_drive(file_path)
        context.user_data["image_url"] = file_path
    else:
        text = update.message.text.strip()
        context.user_data["image_url"] = None if text == "-" else text

    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –¥–∞—Ç—É —ñ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ 2025-10-08T17:00:", parse_mode="Markdown")
    return TIME

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    user = crud.get_user(db, update.effective_user.id)

    try:
        time = datetime.fromisoformat(update.message.text.strip())

        event = crud.create_event(
            db,
            user.id,
            context.user_data["title"],
            context.user_data.get("description"),
            time,
        )
        event.image_url = context.user_data.get("image_url")
        db.commit()

        summary = f"‚úÖ –ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüóì *{context.user_data['title']}*\n"
        if context.user_data.get("description"):
            summary += f"üí¨ {context.user_data['description']}\n"
        if context.user_data.get("link"):
            summary += f"üîó {context.user_data['link']}\n"
        summary += f"üïí {time.strftime('%Y-%m-%d %H:%M')}\n"

        if context.user_data.get("image_url"):
            with open(context.user_data["image_url"], "rb") as img:
                await update.message.reply_photo(photo=img, caption=summary, parse_mode="Markdown")
        else:
            await update.message.reply_text(summary, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: YYYY-MM-DDTHH:MM.")
        print("DATE ERROR:", e)
    finally:
        db.close()

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END
