"""
handlers.py ‚Äî –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ–π
"""

import os
import re
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from backend import database, crud
from .keyboards import start_keyboard
from backend.models import Event

ALLOWED_PHONE = os.getenv("ALLOWED_PHONE")

# –°—Ç–∞–Ω –¥–ª—è –¥—ñ–∞–ª–æ–≥—ñ–≤
ASK_PHONE, TITLE, DESCRIPTION, LINK, PHOTO, TIME = range(6)

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
IMAGES_DIR = "images"
os.makedirs(IMAGES_DIR, exist_ok=True)

# === –•–µ–ª–ø–µ—Ä –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ ===
def normalize_phone(p: str | None) -> str | None:
    if not p:
        return None
    return re.sub(r"\D+", "", p)  # –ª–∏—à–∞—î–º–æ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏


# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    user = update.effective_user

    db_user = crud.get_user(db, user.id)
    if not db_user:
        crud.create_user(db, user.id, user.username or "unknown")
    db.close()

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á **Cyberfield NeT**.\n"
        "–Ø –Ω–∞–¥—Å–∏–ª–∞—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—ó.\n\n"
        "–Ø–∫—â–æ —Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é /addevent, —â–æ–± —É–≤—ñ–π—Ç–∏ –¥–æ –ø–∞–Ω–µ–ª—ñ."
    )


# === /addevent ===
async def addevent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_button = KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üîê –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=reply_markup
    )
    return ASK_PHONE


# === –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É ===
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    user = update.effective_user
    db_user = crud.get_user(db, user.id)

    if not update.message.contact:
        await update.message.reply_text(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–æ—é 'üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä'.",
            reply_markup=ReplyKeyboardRemove()
        )
        db.close()
        return ConversationHandler.END

    raw_phone = update.message.contact.phone_number
    phone_number = normalize_phone(raw_phone)
    allowed_norm = normalize_phone(ALLOWED_PHONE)

    if db_user:
        db_user.phone = phone_number
        db.commit()
    db.close()

    if phone_number != allowed_norm:
        await update.message.reply_text(
            "üö´ –¢–≤—ñ–π –Ω–æ–º–µ—Ä –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "‚úÖ –í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ.\n"
        "üìã –í–∏–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=start_keyboard()
    )
    return ConversationHandler.END


# === –ø–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó ===
async def start_create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    query = update.callback_query
    await query.answer()

    user = crud.get_user(db, query.from_user.id)
    db.close()

    if not user or normalize_phone(user.phone) != normalize_phone(ALLOWED_PHONE):
        await query.message.reply_text("üö´ –¢–∏ –Ω–µ –º–∞—î—à –ø—Ä–∞–≤–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó.")
        return ConversationHandler.END

    await query.message.reply_text("üìù –í–≤–µ–¥–∏ *–Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó*:", parse_mode="Markdown")
    return TITLE


# === –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ ===
async def get_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text("üí¨ –í–≤–µ–¥–∏ –æ–ø–∏—Å –∞–±–æ `-`, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", parse_mode="Markdown")
    return DESCRIPTION


# === –æ–ø–∏—Å ===
async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data["description"] = None if text == "-" else text
    await update.message.reply_text("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ `-`, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", parse_mode="Markdown")
    return LINK


# === –ø–æ—Å–∏–ª–∞–Ω–Ω—è ===
async def get_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data["link"] = None if text == "-" else text
    await update.message.reply_text("üì∏ –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ `-`, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", parse_mode="Markdown")
    return PHOTO


# === —Ñ–æ—Ç–æ ===
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        file_path = os.path.join(IMAGES_DIR, f"{file.file_unique_id}.jpg")
        await file.download_to_drive(file_path)
        context.user_data["image_url"] = file_path
    else:
        text = update.message.text.strip()
        context.user_data["image_url"] = None if text == "-" else text

    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –¥–∞—Ç—É —ñ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ 2025-10-08T17:00:", parse_mode="Markdown")
    return TIME


# === –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ—ó ===
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    user = crud.get_user(db, update.effective_user.id)

    try:
        time = datetime.fromisoformat(update.message.text.strip())
        event = crud.create_event(
            db,
            user.id,
            context.user_data["title"],
            context.user_data.get("description"),
            time,
        )
        event.image_url = context.user_data.get("image_url")
        db.commit()

        summary = f"‚úÖ –ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüóì *{context.user_data['title']}*\n"
        if context.user_data.get("description"):
            summary += f"üí¨ {context.user_data['description']}\n"
        if context.user_data.get("link"):
            summary += f"üîó {context.user_data['link']}\n"
        summary += f"üïí {time.strftime('%Y-%m-%d %H:%M')}\n"

        if context.user_data.get("image_url"):
            with open(context.user_data["image_url"], "rb") as img:
                await update.message.reply_photo(photo=img, caption=summary, parse_mode="Markdown")
        else:
            await update.message.reply_text(summary, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: YYYY-MM-DDTHH:MM.")
        print("DATE ERROR:", e)
    finally:
        db.close()

    return ConversationHandler.END


# === —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# === /myevents ===
async def myevents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    try:
        events = (
            db.query(Event)
            .filter(Event.time >= datetime.now())
            .order_by(Event.time.asc())
            .all()
        )

        if not events:
            await update.message.reply_text("üì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –ø–æ–¥—ñ—ó.")
            return

        for ev in events:
            summary = f"üìÖ *{ev.title}*\n"
            if ev.description:
                summary += f"üí¨ {ev.description}\n"
            summary += f"üïí {ev.time.strftime('%Y-%m-%d %H:%M')}\n"
            if getattr(ev, "link", None):
                summary += f"üîó [–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è]({ev.link})\n"

            if ev.image_url and os.path.exists(ev.image_url):
                try:
                    with open(ev.image_url, "rb") as img:
                        await update.message.reply_photo(photo=img, caption=summary, parse_mode="Markdown")
                except Exception as e:
                    print(f"[myevents] –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ç–æ: {e}")
                    await update.message.reply_text(summary, parse_mode="Markdown")
            else:
                await update.message.reply_text(summary, parse_mode="Markdown")
    except Exception as e:
        print(f"[myevents] ERROR: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ–π.")
    finally:
        db.close()
