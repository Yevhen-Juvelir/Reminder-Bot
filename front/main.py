"""
main.py ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Telegram-–±–æ—Ç–∞ Cyberfield NeT Reminder
"""

import os
import nest_asyncio
import logging
from dotenv import load_dotenv
from telegram import BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)

# === –Ü–º–ø–æ—Ä—Ç–∏ –≤–ª–∞—Å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ ===
from backend import database, models
from front.handlers import (
    start, addevent, get_phone,
    start_create_event, get_title, get_description,
    get_link, get_photo, get_time, cancel, myevents,
    ASK_PHONE, TITLE, DESCRIPTION, LINK, PHOTO, TIME
)
from front.handlers_admin import (
    show_all_events, delete_event, cancel_delete, confirm_delete
)
from front.scheduler import start_scheduler

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
nest_asyncio.apply()
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ===
models.Base.metadata.create_all(bind=database.engine)



# === –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è Telegram ===
async def set_commands(app):
    commands = [
        BotCommand("start", "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        BotCommand("addevent", "–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"),
        BotCommand("myevents", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–æ–¥—ñ—ó"),
        BotCommand("cancel", "–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é"),
    ]
    await app.bot.set_my_commands(commands)

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ===
async def on_error(update, context):
    logging.exception("Unhandled exception in handler:", exc_info=context.error)
    try:
        if update and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –Ø –≤–∂–µ –∑–∞–ø–∏—Å–∞–≤ –ª–æ–≥."
            )
    except Exception:
        pass

# === –ü–æ–¥—ñ—ó –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É ===
async def post_startup(app):
    start_scheduler()
    print("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
    await set_commands(app)

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Telegram ===
app = (
    ApplicationBuilder()
    .token(TOKEN)
    .post_init(post_startup)
    .build()
)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π error handler
app.add_error_handler(on_error)

# === –ö–æ–º–∞–Ω–¥–∏ ===
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("myevents", myevents))

# === –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞) ===
conv_addevent = ConversationHandler(
    entry_points=[CommandHandler("addevent", addevent)],
    states={
        ASK_PHONE: [MessageHandler(filters.CONTACT, get_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)
app.add_handler(conv_addevent)

# === –î—ñ–∞–ª–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó ===
conv_create_event = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_create_event, pattern="create_event")],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_title)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
        LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_link)],
        PHOTO: [MessageHandler(filters.PHOTO | (filters.TEXT & ~filters.COMMAND), get_photo)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)
app.add_handler(conv_create_event)

# === –ê–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ—ó ===
app.add_handler(CallbackQueryHandler(show_all_events, pattern="show_events"))
app.add_handler(CallbackQueryHandler(confirm_delete, pattern=r"confirm_delete_\d+"))
app.add_handler(CallbackQueryHandler(delete_event, pattern=r"delete_\d+"))
app.add_handler(CallbackQueryHandler(cancel_delete, pattern="cancel_delete"))

# === –ó–∞–ø—É—Å–∫ ===
print("–ë–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ üöÄ")
app.run_polling()
