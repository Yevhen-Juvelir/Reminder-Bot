from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from backend import database, models
import os

ALLOWED_PHONE = os.getenv("ALLOWED_PHONE")

# ----------------- –ü–û–ö–ê–ó–ê–¢–ò –í–°–Ü –ü–û–î–Ü–á -----------------
async def show_all_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    query = update.callback_query
    await query.answer()

    user = query.from_user
    db_user = db.query(models.User).filter(models.User.telegram_id == user.id).first()

    if not db_user or db_user.phone != ALLOWED_PHONE:
        await query.message.reply_text("üö´ –¢–∏ –Ω–µ –º–∞—î—à –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        db.close()
        return

    events = db.query(models.Event).all()
    if not events:
        await query.message.reply_text("‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ø–æ–¥—ñ—ó.")
        db.close()
        return

    for ev in events:
        summary = f"üìÖ *{ev.title}*\n"
        if ev.description:
            summary += f"üí¨ {ev.description}\n"
        summary += f"üïí {ev.time.strftime('%Y-%m-%d %H:%M')}\n"
        if getattr(ev, "link", None):
            summary += f"üîó [–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è]({ev.link})\n"

        keyboard = [
            [InlineKeyboardButton(f"üóë –í–∏–¥–∞–ª–∏—Ç–∏ {ev.id}", callback_data=f"confirm_delete_{ev.id}")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if ev.image_url and os.path.exists(ev.image_url):
            try:
                with open(ev.image_url, "rb") as img:
                    await query.message.reply_photo(
                        photo=img,
                        caption=summary,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
                await query.message.reply_text(summary, parse_mode="Markdown", reply_markup=markup)
        else:
            await query.message.reply_text(summary, parse_mode="Markdown", reply_markup=markup)

    db.close()


# ----------------- –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –í–ò–î–ê–õ–ï–ù–ù–Ø -----------------
async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = int(query.data.replace("confirm_delete_", ""))

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{event_id}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_delete")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é #{event_id}?",
        reply_markup=markup
    )


# ----------------- –í–ò–î–ê–õ–ï–ù–ù–Ø –û–î–ù–Ü–Ñ–á –ü–û–î–Ü–á -----------------
async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = database.SessionLocal()
    query = update.callback_query
    await query.answer()

    event_id = int(query.data.replace("delete_", ""))
    event = db.query(models.Event).filter(models.Event.id == event_id).first()

    if not event:
        await query.message.reply_text("‚ö†Ô∏è –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        db.close()
        return

    # üßπ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ, —è–∫—â–æ —î
    if event.image_url and os.path.exists(event.image_url):
        try:
            os.remove(event.image_url)
            print(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {event.image_url}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ {event.image_url}: {e}")

    db.delete(event)
    db.commit()
    db.close()

    await query.message.reply_text(f"üóë –ü–æ–¥—ñ—é *{event.title}* —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", parse_mode="Markdown")


# ----------------- –°–ö–ê–°–£–í–ê–ù–ù–Ø -----------------
async def cancel_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
