from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from backend import crud, database, models
from telegram import Bot
import os

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
scheduler = AsyncIOScheduler()


async def check_events():
    db = database.SessionLocal()
    now = datetime.now()
    events = crud.get_upcoming_events(db, now)

    if not events:
        db.close()
        return

    users = db.query(models.User).all()

    for ev in events:
        # üß© –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ –æ–ø–∏—Å–æ–º, –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ —á–∞—Å–æ–º)
        summary = f"üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n" \
                  f"üóì *{ev.title}*\n"

        if ev.description:
            summary += f"üí¨ {ev.description}\n"

        if ev.image_url:
            summary += f"üïí {ev.time.strftime('%Y-%m-%d %H:%M')}\n"
        else:
            summary += f"üïí {ev.time.strftime('%Y-%m-%d %H:%M')}\n"

        # üß© –¥–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (Markdown —Ñ–æ—Ä–º–∞—Ç)
        if hasattr(ev, "link") and ev.link:
            summary += f"üîó [–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è]({ev.link})\n"

        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        for usr in users:
            try:
                if ev.image_url and os.path.exists(ev.image_url):
                    with open(ev.image_url, "rb") as img:
                        await bot.send_photo(
                            chat_id=usr.telegram_id,
                            photo=img,
                            caption=summary,
                            parse_mode="Markdown"
                        )
                else:
                    await bot.send_message(
                        chat_id=usr.telegram_id,
                        text=summary,
                        parse_mode="Markdown"
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {usr.telegram_id}: {e}")

        # üßπ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        if ev.image_url and os.path.exists(ev.image_url):
            try:
                os.remove(ev.image_url)
                print(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {ev.image_url}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ {ev.image_url}: {e}")

        db.delete(ev)
        db.commit()

    db.close()


def start_scheduler():
    scheduler.add_job(check_events, "interval", seconds=30)
    scheduler.start()
