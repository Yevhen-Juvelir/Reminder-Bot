"""
scheduler.py ‚Äî –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫, —è–∫–∏–π —Ä–æ–∑—Å–∏–ª–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
"""

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from backend import crud, database, models
from telegram import Bot
import os

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
scheduler = AsyncIOScheduler()

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–¥—ñ–π, —è–∫—ñ –Ω–∞—Å—Ç–∞–ª–∏
async def check_events():
    db = database.SessionLocal()
    now = datetime.now()
    events = crud.get_upcoming_events(db, now)

    if not events:
        db.close()
        return

    users = db.query(models.User).all()

    for ev in events:
        summary = f"üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\nüóì *{ev.title}*\n"
        if ev.description:
            summary += f"üí¨ {ev.description}\n"
        summary += f"üïí {ev.time.strftime('%Y-%m-%d %H:%M')}\n"

        if hasattr(ev, "link") and ev.link:
            summary += f"üîó [–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è]({ev.link})\n"

        for usr in users:
            try:
                if ev.image_url and os.path.exists(ev.image_url):
                    with open(ev.image_url, "rb") as img:
                        await bot.send_photo(chat_id=usr.telegram_id, photo=img, caption=summary, parse_mode="Markdown")
                else:
                    await bot.send_message(chat_id=usr.telegram_id, text=summary, parse_mode="Markdown")
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {usr.telegram_id}: {e}")

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—ñ—Å–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        if ev.image_url and os.path.exists(ev.image_url):
            os.remove(ev.image_url)
        db.delete(ev)
        db.commit()

    db.close()

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
def start_scheduler():
    scheduler.add_job(check_events, "interval", seconds=30)
    scheduler.start()
